// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPERADMIN
  ADMIN
  DISPATCHER
  DRIVER
}

// Multi-tenant support
model Tenant {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  slug        String   @unique // URL-friendly identifier
  domain      String?  @unique // Custom domain
  schemaName  String   @unique // Database schema name
  gstNumber   String?  // GST Number for transporter
  isActive    Boolean  @default(true)
  settings    Json?    // Tenant-specific settings
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users     user[]
  vehicles  Vehicle[]
  drivers   Driver[]
  shipments Shipment[]
  employees Employee[]
  expenses  Expense[]
}

model user {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(DISPATCHER)
  phone     String?
  settings  Json?    // User preferences and settings
  createdAt DateTime @default(now())
  isActive  Boolean  @default(true)
  // Multi-tenant relation
  tenantId  Int?
  tenant    Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  driver    Driver?
}

model Vehicle {
  id          Int      @id @default(autoincrement())
  number      String   @unique
  model       String
  capacity    Int
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())

  // Multi-tenant relation
  tenantId    Int
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  driver   Driver?    @relation("DriverVehicle")
  Shipment Shipment[]
}

model Driver {
  id            Int      @id @default(autoincrement())
  userId        Int      @unique
  name          String
  phone         String   @unique
  licenseNumber String   @unique
  createdAt     DateTime @default(now())

  // Multi-tenant relation
  tenantId      Int
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  vehicle   Vehicle?   @relation("DriverVehicle", fields: [vehicleId], references: [id])
  vehicleId Int?       @unique
  Shipment  Shipment[]
  user      user      @relation(fields: [userId], references: [id])
}

enum GoodsType {
  BOX
  NAGS
  CARTONS
  BAGS
  ROLLS
  PALLETS
  OTHER
}

enum PaymentMethod {
  TO_PAY
  PAID
  TO_BE_BILLED
}

enum ShipmentStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  DELIVERED
}

model Shipment {
  id                  Int           @id @default(autoincrement())
  consigneeName       String
  consignorName       String
  consigneeAddress    String
  consignorAddress    String
  consigneeGstNo      String
  consignorGstNo      String
  date                DateTime
  billNo              String        @unique
  transportName       String
  goodsType           GoodsType
  goodsDescription    String
  weight              Float
  privateMark         String?
  paymentMethod       PaymentMethod
  freightCharges      Float
  localCartageCharges Float
  hamaliCharges       Float
  stationaryCharges   Float
  doorDeliveryCharges Float
  otherCharges        Float
  grandTotal          Float
  source              String
  destination         String
  ewayBillNumber      String?
  status              ShipmentStatus @default(PENDING)
  createdAt           DateTime      @default(now())

  // Multi-tenant relation
  tenantId            Int
  tenant              Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  driver   Driver? @relation(fields: [driverId], references: [id])
  driverId Int?

  vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])
  vehicleId Int?
}

model GlobalSettings {
  id        Int    @id @default(1)
  data      Json
  updatedAt DateTime @updatedAt
}

model Employee {
  id            String   @id @default(uuid())
  name          String
  role          EmployeeRole
  phone         String?
  email         String?
  aadharNumber  String?
  address       String?
  salary        Decimal
  status        EmployeeStatus @default(ACTIVE)
  dateOfJoining DateTime?
  transporter   Tenant   @relation(fields: [transporterId], references: [id])
  transporterId Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  expenses      Expense[]
}

enum EmployeeRole {
  DRIVER
  LOADER
  MANAGER
  SUPERVISOR
  ACCOUNTANT
  CLEANER
  MECHANIC
  SECURITY
  HELPER
  OTHER
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  ON_LEAVE
  TERMINATED
}

model Expense {
  id            String   @id @default(uuid())
  title         String   // Added for expense title
  amount        Decimal
  category      ExpenseCategory
  description   String?
  date          DateTime
  status        ExpenseStatus @default(PENDING)
  transporter   Tenant   @relation(fields: [transporterId], references: [id])
  transporterId Int
  employee      Employee? @relation(fields: [employeeId], references: [id])
  employeeId    String?
  createdAt     DateTime @default(now())
}

enum ExpenseCategory {
  FUEL
  MAINTENANCE
  SALARY
  TOLL
  INSURANCE
  OFFICE_SUPPLIES
  REPAIR
  PARKING
  FINES
  TAX
  RENT
  UTILITIES
  LOAN_PAYMENT
  COMMISSION
  TRAINING
  MEDICAL
  OTHER
}

enum ExpenseStatus {
  PENDING
  APPROVED
  PAID
  REJECTED
}
